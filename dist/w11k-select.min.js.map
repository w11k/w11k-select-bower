{"version":3,"file":null,"sources":["../src/lib/set-selected.ts","../src/lib/external-option-2-value.ts","../src/lib/internal-option-2-value.ts","../src/lib/internal-options-2-external-model.ts","../src/lib/value-2-tracking-id.ts","../src/lib/external-option-2-label.ts","../src/lib/external-options-2-internal-options.ts","../src/lib/collect-active-labels.ts","../src/w11k-select.directive.ts","../src/w11k-select-option/w11k-select-option.directive.ts","../src/w11k-select-checkbox/w11k-checkbox.directive.ts","../src/w11k-select-infinite-scroll.directive.ts","../src/lib/key-listener.ts","../src/model/config.model.ts","../src/model/option-state.enum.ts","../src/w11k-select-helper.factory.ts","../src/model/internal-option.model.ts","../src/w11k-select.ts"],"sourcesContent":["import {InternalOption} from '../model/internal-option.model';\nimport {OptionState} from '../model/option-state.enum';\nexport function setSelected(options: InternalOption[], selected: boolean) {\n  let i = options.length;\n  while (i--) {\n    options[i].selected = selected;\n    options[i].state = selected ? OptionState.selected : OptionState.unselected;\n    setSelected(options[i].children || [], selected)\n  }\n}\n","export function externalOption2value(option, optionsExpParsed) {\n  let context = {};\n  context[optionsExpParsed.item] = option;\n\n  return optionsExpParsed.value(context);\n}\n","import {externalOption2value} from './external-option-2-value';\nexport function internalOption2value(option, optionsExpParsed) {\n  return externalOption2value(option.model, optionsExpParsed);\n}\n","import {internalOption2value} from './internal-option-2-value';\nimport {Config} from '../model/config.model';\nimport {InternalOption} from '../model/internal-option.model';\nimport {OptionState} from '../model/option-state.enum';\n\nexport function internalOptions2externalModel(options, optionsExpParsed, config: Config) {\n  let arr = [];\n  options.forEach(option => traverse(option, arr, optionsExpParsed));\n  return arr;\n}\n\n\nfunction traverse(option: InternalOption, arr, optionsExpParsed) {\n  if (option.state === OptionState.selected) {\n    arr.push(internalOption2value(option, optionsExpParsed))\n  }\n  option.children.forEach(option => traverse(option, arr, optionsExpParsed))\n\n}\n","export function value2trackingId(value, w11kSelectHelper, optionsExpParsed) {\n  if (optionsExpParsed.tracking !== undefined) {\n    let context = {};\n    let assignValueFn = optionsExpParsed.value.assign;\n    assignValueFn(context, value);\n\n    let trackingValue = optionsExpParsed.tracking(context);\n\n    if (trackingValue === undefined) {\n      throw new Error('Couldn\\'t get \\'track by\\' value. Please make sure to only use something in \\'track byâ€™ part of w11kSelectOptions expression, accessible from result of value part. (\\'option.data\\' and \\'option.data.unique\\' but not \\'option.unique\\')');\n    }\n\n    return trackingValue.toString();\n  }\n  else {\n    return w11kSelectHelper.hashCode(value);\n  }\n\n}\n","export function externalOption2label(option, optionsExpParsed) {\n  let context = {};\n  context[optionsExpParsed.item] = option;\n\n  return optionsExpParsed.label(context);\n}\n","import {externalOption2value} from './external-option-2-value';\nimport {externalOption2label} from './external-option-2-label';\nimport {value2trackingId} from './value-2-tracking-id';\nimport {OptionState} from '../model/option-state.enum';\nimport {ConfigInstance} from '../model/config.model';\nimport {InternalOption} from '../model/internal-option.model';\n\nexport function externalOptions2internalOptions(externalOptions, viewValue, w11kSelectHelper, optionsExpParsed, config: ConfigInstance): InternalOption[] {\n  let viewValueIDs = {};\n\n  let i = viewValue.length;\n\n  while (i--) {\n    let trackingId = value2trackingId(viewValue[i], w11kSelectHelper, optionsExpParsed);\n    viewValueIDs[trackingId] = true;\n  }\n\n  function prepareOptions(externalOption, parent?: string) {\n    let value = externalOption2value(externalOption, optionsExpParsed);\n    let trackingId = value2trackingId(value, w11kSelectHelper, optionsExpParsed);\n    let label = externalOption2label(externalOption, optionsExpParsed);\n\n    let internalOption = new InternalOption(\n        trackingId,\n        label,\n        externalOption,\n        !!viewValueIDs[trackingId],\n        viewValueIDs[trackingId] ? OptionState.selected : OptionState.unselected,\n        [],\n        parent || null\n    );\n\n    if (externalOption[config.children]) {\n      internalOption.children = externalOption[config.children].map(child => prepareOptions(child, trackingId))\n    }\n    return internalOption;\n  }\n\n  return externalOptions.map(prepareOptions);\n}\n","import {InternalOption} from '../model/internal-option.model';\nimport {OptionState} from '../model/option-state.enum';\n\nexport function collectActiveLabels(option: InternalOption, labelArray: string[]): void {\n  if (option.state === OptionState.selected) {\n    labelArray.push(option.label)\n  }\n  option.children.forEach(option => collectActiveLabels(option, labelArray))\n}\n","/** @internal */\nimport * as angular from 'angular';\nimport {setSelected} from './lib/set-selected';\nimport {internalOptions2externalModel} from './lib/internal-options-2-external-model';\nimport {value2trackingId} from './lib/value-2-tracking-id';\nimport {externalOptions2internalOptions} from './lib/external-options-2-internal-options';\nimport {InternalOption} from './model/internal-option.model';\nimport {OptionState} from './model/option-state.enum';\nimport {ConfigInstance} from './model/config.model';\nimport {collectActiveLabels} from './lib/collect-active-labels';\n\n\nexport interface Scope extends ng.IScope {\n  config: ConfigInstance;\n  style: any;  // only required once?\n  onKeyPressedOnDropDownToggle: (event: any) => void;\n  showMoreOptions: () => void;\n  onFilterValueChanged: () => void;\n  clearFilter: () => void;\n  onKeyPressedInFilter: ($event: any) => void;\n  selectFiltered: ($event?: any) => void\n  deselectFiltered: ($event: any) => void\n  deselectAll: ($event: any) => void\n  select: ($event: any) => void;\n  isEmpty: () => boolean;\n\n  options: {\n    visible: any[]\n  };\n  filter: {\n    values: any\n  };\n\n  dropdown: {\n    onOpen?: ($event: any) => void | undefined;\n    onClose?: () => void | undefined;\n    close?: () => void;\n    toggle?: any\n  }\n\n}\n\nexport function w11kSelect(w11kSelectConfig, $parse, $document, w11kSelectHelper, $filter, $timeout, $window, $q) {\n  'ngInject';\n\n  let jqWindow = angular.element($window);\n\n  return {\n    restrict: 'A',\n    replace: false,\n    templateUrl: w11kSelectConfig.common.templateUrl,\n    scope: {},\n    require: 'ngModel',\n    controller: function ($scope, $attrs, $parse) {\n      if ($attrs.w11kSelect && $attrs.w11kSelect.length > 0) {\n        let exposeExpression = $parse($attrs.w11kSelect);\n\n        if (exposeExpression.assign) {\n          exposeExpression.assign($scope.$parent, this);\n        }\n      }\n\n      this.open = function () {\n        $scope.dropdown.open();\n      };\n\n      this.close = function () {\n        $scope.dropdown.close();\n      };\n\n      this.toggle = function () {\n        $scope.dropdown.toggle();\n      };\n    },\n    compile: function (tElement, tAttrs) {\n      let configExpParsed = $parse(tAttrs.w11kSelectConfig);\n      let optionsExpParsed = w11kSelectHelper.parseOptions(tAttrs.w11kSelectOptions);\n\n      let ngModelSetter = $parse(tAttrs.ngModel).assign;\n      let assignValueFn = optionsExpParsed.value.assign;\n\n      if (optionsExpParsed.tracking !== undefined && assignValueFn === undefined) {\n        throw new Error('value part of w11kSelectOptions expression must be assignable if \\'track by\\' is used');\n      }\n\n      return function (scope: Scope, iElement: any, iAttrs: any, controller: any) {\n        let domElement = iElement[0];\n\n        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         * internal model\n         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n        let hasBeenOpened = false;\n        let internalOptions: InternalOption[] = [];\n        let internalOptionsMap = {};\n        let optionsFiltered = [];\n\n        scope.options = {\n          visible: []\n        };\n\n        scope.filter = {\n          values: {}\n        };\n\n        scope.config = angular.copy(w11kSelectConfig.instance);\n\n        // marker to read some parts of the config only once\n        let configRead = false;\n\n        scope.$watch(\n            function () {\n              return configExpParsed(scope.$parent);\n            },\n            function (newConfig) {\n              if (angular.isArray(newConfig)) {\n                w11kSelectHelper.extendDeep.apply(null, [scope.config].concat(newConfig));\n                applyConfig();\n              }\n              else if (angular.isObject(newConfig)) {\n                w11kSelectHelper.extendDeep(scope.config, newConfig);\n                applyConfig();\n              }\n            },\n            true\n        );\n\n        function applyConfig() {\n          optionsAlreadyRead.then(function () {\n            checkSelection();\n            updateNgModel();\n            checkConfig(scope.config, setViewValue);\n          });\n\n          if (!configRead) {\n            updateStaticTexts();\n            configRead = true;\n          }\n        }\n\n        function updateStaticTexts() {\n          if (scope.config.filter.select.active && scope.config.filter.select.text) {\n            let selectFilteredButton = domElement.querySelector('.select-filtered-text');\n            selectFilteredButton.textContent = scope.config.filter.select.text;\n          }\n\n          if (scope.config.filter.deselect.active && scope.config.filter.deselect.text) {\n            let deselectFilteredButton = domElement.querySelector('.deselect-filtered-text');\n            deselectFilteredButton.textContent = scope.config.filter.deselect.text;\n          }\n\n          if (scope.config.header.placeholder) {\n            let headerPlaceholder = domElement.querySelector('.header-placeholder');\n            headerPlaceholder.textContent = scope.config.header.placeholder;\n          }\n        }\n\n        function checkSelection() {\n          if (scope.config.multiple === false) {\n            let selectedOptions: InternalOption[] = internalOptions.filter(\n                (option) => option.state === OptionState.selected\n            );\n\n            if (selectedOptions.length > 0) {\n              setSelected(selectedOptions, false);\n              selectedOptions[0].state = OptionState.selected;\n            }\n          }\n        }\n\n        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         * dropdown\n         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n\n        function onEscPressed(event) {\n          if (event.keyCode === 27) {\n            if (scope.dropdown.close) { // check is for ts only\n              scope.dropdown.close();\n            }\n          }\n        }\n\n        function adjustHeight() {\n          if (angular.isDefined(scope.config.style.maxHeight)) {\n            domDropDownContent.style.maxHeight = scope.style.maxHeight;\n          }\n          else {\n            let maxHeight = calculateDynamicMaxHeight();\n            domDropDownContent.style.maxHeight = maxHeight + 'px';\n\n          }\n        }\n\n        function resetHeight() {\n          domDropDownContent.style.maxHeight = '';\n        }\n\n        function calculateDynamicMaxHeight() {\n          let maxHeight;\n\n          let contentOffset = domDropDownContent.getBoundingClientRect().top;\n\n          let windowHeight = $window.innerHeight || $window.document.documentElement.clientHeight;\n\n          let containerHeight;\n          let containerOffset;\n\n          if (angular.isDefined(domHeightAdjustContainer)) {\n            containerHeight = domHeightAdjustContainer.innerHeight || domHeightAdjustContainer.clientHeight;\n            containerOffset = domHeightAdjustContainer.getBoundingClientRect().top;\n          }\n          else {\n            containerHeight = $window.innerHeight || $window.document.documentElement.clientHeight;\n            containerOffset = 0;\n          }\n\n          if (scope.config.style.marginBottom.indexOf('px') < 0) {\n            throw new Error('Illegal Value for w11kSelectStyle.marginBottom');\n          }\n          let marginBottom = parseFloat(scope.config.style.marginBottom.slice(0, -2));\n\n          let referenceHeight;\n          let referenceOffset;\n\n          if (containerHeight + containerOffset > windowHeight) {\n            referenceHeight = windowHeight;\n            referenceOffset = 0;\n          }\n          else {\n            referenceHeight = containerHeight;\n            referenceOffset = containerOffset;\n          }\n\n          maxHeight = referenceHeight - (contentOffset - referenceOffset) - marginBottom;\n\n          let minHeightFor3Elements = 93;\n          if (maxHeight < minHeightFor3Elements) {\n            maxHeight = minHeightFor3Elements;\n          }\n\n          return maxHeight;\n        }\n\n        let domDropDownMenu = domElement.querySelector('.dropdown-menu');\n        let domDropDownContent = domElement.querySelector('.dropdown-menu .content');\n        let domHeightAdjustContainer = w11kSelectHelper.getParent(iElement, '.w11k-select-adjust-height-to');\n        let domHeaderText = domElement.querySelector('.header-text');\n\n        scope.dropdown = {\n          onOpen: function ($event) {\n            if (scope.config.disabled) {\n              $event.prevent();\n              return;\n            }\n\n            if (hasBeenOpened === false) {\n              hasBeenOpened = true;\n            }\n            filterOptions();\n\n            $document.on('keyup', onEscPressed);\n\n            domDropDownMenu.style.visibility = 'hidden';\n            $timeout(function () {\n              adjustHeight();\n              domDropDownMenu.style.visibility = 'visible';\n\n              if (scope.config.filter.active) {\n                // use timeout to open dropdown first and then set the focus,\n                // otherwise focus won't be set because iElement is not visible\n                $timeout(function () {\n                  iElement[0].querySelector('.dropdown-menu input').focus();\n                });\n              }\n            });\n            jqWindow.on('resize', adjustHeight);\n\n            if (angular.isFunction(scope.config.dropdown.onOpen)) {\n              (scope.config.dropdown.onOpen as any)();\n            }\n          },\n          onClose: function () {\n            // important: set properties of filter.values to empty strings not to null,\n            // otherwise angular's filter won't work\n            scope.filter.values.label = '';\n\n            $timeout(function () {\n              resetHeight();\n            });\n            $document.off('keyup', onEscPressed);\n            jqWindow.off('resize', adjustHeight);\n\n            if (angular.isFunction(scope.config.dropdown.onClose)) {\n              (scope.config.dropdown.onClose as any)();\n            }\n          }\n        };\n\n        scope.$on('$destroy', function () {\n          $document.off('keyup', onEscPressed);\n          jqWindow.off('resize', adjustHeight);\n        });\n\n        scope.onKeyPressedOnDropDownToggle = function ($event) {\n          // enter or space\n          if ($event.keyCode === 13 || $event.keyCode === 32) {\n            $event.preventDefault();\n            $event.stopPropagation();\n\n            scope.dropdown.toggle();\n          }\n        };\n\n        function updateHeader() {\n          if (angular.isDefined(scope.config.header.text)) {\n            domHeaderText.textContent = scope.$parent.$eval(scope.config.header.text as any);\n          }\n          else {\n            let arr = [];\n            internalOptions.forEach(option => collectActiveLabels(option, arr));\n            domHeaderText.textContent = arr.join(', ');\n          }\n        }\n\n        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         * filter\n         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n        let filter = $filter('filter');\n        let initialLimitTo = 80;\n        let increaseLimitTo = initialLimitTo * 0.5;\n\n        function filterOptions() {\n          if (hasBeenOpened) {\n            // false as third parameter: use contains to compare\n            optionsFiltered = filter(internalOptions, scope.filter.values, false);\n            scope.options.visible = optionsFiltered.slice(0, initialLimitTo);\n          }\n        }\n\n        scope.showMoreOptions = function () {\n          scope.options.visible = optionsFiltered.slice(0, scope.options.visible.length + increaseLimitTo);\n        };\n\n        scope.onFilterValueChanged = function () {\n          filterOptions();\n        };\n\n        scope.clearFilter = function () {\n          scope.filter.values = {};\n          filterOptions();\n        };\n\n        scope.onKeyPressedInFilter = function ($event) {\n          // on enter\n          if ($event.keyCode === 13) {\n            $event.preventDefault();\n            $event.stopPropagation();\n\n            scope.selectFiltered();\n          }\n        };\n\n        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         * buttons\n         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n        scope.selectFiltered = function ($event?) {\n          if (angular.isDefined($event)) {\n            $event.preventDefault();\n            $event.stopPropagation();\n          }\n\n          if (scope.config.multiple) {\n            setSelected(optionsFiltered, true);\n          }\n          else if (optionsFiltered.length === 1) {\n            scope.select(optionsFiltered[0]); // behaves like if the option was clicked using the mouse\n          }\n\n          setViewValue();\n        };\n\n        scope.deselectFiltered = function ($event) {\n          if (angular.isDefined($event)) {\n            $event.preventDefault();\n            $event.stopPropagation();\n          }\n\n          setSelected(optionsFiltered, false);\n          setViewValue();\n        };\n\n        scope.deselectAll = function ($event) {\n          if (angular.isDefined($event)) {\n            $event.preventDefault();\n            $event.stopPropagation();\n          }\n\n          setSelected(internalOptions, false);\n          setViewValue();\n        };\n\n        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         * options\n         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n\n        let optionsAlreadyRead;\n\n        let updateOptions = (function () {\n          let deferred = $q.defer();\n          optionsAlreadyRead = deferred.promise;\n\n          return function updateOptions() {\n            let externalOptions = optionsExpParsed.collection(scope.$parent);\n            let viewValue = controller.$viewValue;\n\n            if (angular.isArray(externalOptions)) {\n              internalOptions = externalOptions2internalOptions(externalOptions, viewValue, w11kSelectHelper, optionsExpParsed, scope.config);\n              internalOptionsMap = {};\n              let i = internalOptions.length;\n              while (i--) {\n                let option: any = internalOptions[i];\n                if (internalOptionsMap[option.trackingId]) {\n                  throw new Error('Duplicate hash value for options ' + option.label + ' and ' + internalOptionsMap[option.trackingId].label);\n                }\n                internalOptionsMap[option.trackingId] = option;\n              }\n\n              filterOptions();\n\n              if (ngModelAlreadyRead) {\n                updateNgModel();\n              }\n              deferred.resolve();\n            }\n          };\n        })();\n\n        // watch for changes of options collection made outside\n        scope.$watchCollection(\n            function externalOptionsWatch() {\n              return optionsExpParsed.collection(scope.$parent);\n            },\n            function externalOptionsWatchAction(newVal) {\n              if (angular.isDefined(newVal)) {\n                updateOptions();\n              }\n            }\n        );\n\n        scope.select = function select(option: InternalOption) {\n          // runs only if hierarchy is flat and multiple false\n\n          if (scope.config.multiple) {\n            setViewValue();\n            return\n          }\n\n          // disable all others:\n          setSelected(internalOptions, false);\n          option.state = OptionState.selected;\n          setViewValue();\n          (scope.dropdown.close as any)();\n        };\n\n\n        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         * ngModel\n         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n        function setViewValue() {\n          let selectedValues = internalOptions2externalModel(internalOptions, optionsExpParsed, w11kSelectConfig);\n\n          controller.$setViewValue(selectedValues);\n          updateHeader();\n        }\n\n        function updateNgModel() {\n          let value = internalOptions2externalModel(internalOptions, optionsExpParsed, w11kSelectConfig);\n          angular.forEach(controller.$parsers, function (parser) {\n            value = parser(value);\n          });\n\n          ngModelSetter(scope.$parent, value);\n        }\n\n\n        let ngModelAlreadyRead;\n\n        function render() {\n          optionsAlreadyRead.then(function () {\n            ngModelAlreadyRead = true;\n\n            let viewValue = controller.$viewValue;\n\n            setSelected(internalOptions, false);\n\n            let i = viewValue.length;\n            while (i--) {\n              let trackingId = value2trackingId(viewValue[i], w11kSelectHelper, optionsExpParsed);\n              let option = internalOptionsMap[trackingId];\n\n              if (option) {\n                option.state = OptionState.selected;\n              }\n            }\n\n            updateHeader();\n          });\n        }\n\n\n        function external2internal(modelValue) {\n          let viewValue;\n\n          if (angular.isArray(modelValue)) {\n            viewValue = modelValue;\n          }\n          else if (angular.isDefined(modelValue)) {\n            viewValue = [modelValue];\n          }\n          else {\n            viewValue = [];\n          }\n\n          return viewValue;\n        }\n\n        function internal2external(viewValue) {\n          if (angular.isUndefined(viewValue)) {\n            return;\n          }\n\n          let modelValue;\n\n          if (scope.config.multiple) {\n            modelValue = viewValue;\n          }\n          else {\n            modelValue = viewValue[0];\n          }\n\n          return modelValue;\n        }\n\n        function validateRequired(viewValue) {\n          if (scope.config.multiple === true && scope.config.required === true && viewValue.length === 0) {\n            return false;\n          }\n          if (scope.config.multiple === false && scope.config.required === true && viewValue === undefined) {\n            return false;\n          }\n\n          return true;\n        }\n\n        function isEmpty() {\n          let value = controller.$viewValue;\n          return !(angular.isArray(value) && value.length > 0);\n        }\n\n        scope.isEmpty = isEmpty;\n\n        controller.$isEmpty = isEmpty;\n\n        controller.$render = render;\n        controller.$formatters.push(external2internal);\n        controller.$validators.required = validateRequired;\n        controller.$parsers.push(internal2external);\n\n      };\n    }\n  };\n}\n\n\nlet checkConfig = (config: ConfigInstance, setViewValue) => {\n  /**\n   *  Currently there is a bug if multiple = false and required = true.\n   *  Then the validator runs only once, before the config is present\n   *  and returns a wrong validation state.\n   *  might be fixed by calling updateNgModel() here\n   * */\n  // throw error if multiple is false and childrenKey is present\n  if (config.children && !config.multiple) {\n    throw new Error('Multiple must be enabled when displaying hierarchically structure');\n  }\n  if (config.children) {\n    setViewValue();\n  }\n};\n","import {OptionState} from '../model/option-state.enum';\nimport {InternalOption} from '../model/internal-option.model';\n\nclass Result {\n  selected: number = 0;\n  unselected: number = 0;\n  childsSelected: number = 0;\n  length: number;\n\n  constructor(length: number) {\n    this.length = length;\n  }\n}\n\nexport function w11kSelectOptionDirektive(w11kSelectConfig) {\n  'ngInject';\n\n  return {\n    restrict: 'A',\n    replace: false,\n    templateUrl: w11kSelectConfig.common.templateUrlOptions,\n    scope: {\n      'options': '=',\n      'parent': '=',\n      'select': '&',\n    },\n    require: 'ngModel',\n    controller: function ($scope, $attrs, $parse) {\n      if ($scope.$parent.childsMap) {\n        $scope.$parent.addChild($scope, $scope.parent)\n      }\n      $scope.childsMap = {};\n\n\n      $scope.upwardsClick = function (clickedOption: InternalOption, res: Result) {\n        let fatherOption: InternalOption = $scope.options.find(option => option.trackingId === clickedOption.parent);\n        if (res.selected === 0 && res.childsSelected === 0) {\n          setSelected(fatherOption, OptionState.unselected, $scope);\n        } else if (res.selected === res.length) {\n          setSelected(fatherOption, OptionState.selected, $scope);\n        } else {\n          setSelected(fatherOption, OptionState.childsSelected, $scope);\n\n        }\n\n        if ($scope.$parent.upwardsClick) {\n          let res = calcRes($scope.options);\n          $scope.$parent.upwardsClick(fatherOption, res);\n        }\n\n\n      };\n\n      $scope.addChild = function (childScope, father) {\n        $scope.childsMap[father.trackingId] = childScope;\n      };\n      $scope.onOptionStateClick = function ($event, option: InternalOption) {\n\n        switch (option.state) {\n          case OptionState.unselected:\n            setSelected(option, OptionState.selected, $scope);\n            break;\n          case OptionState.selected:\n            setSelected(option, OptionState.unselected, $scope);\n            break;\n          case OptionState.childsSelected:\n            setSelected(option, OptionState.selected, $scope);\n            break;\n        }\n\n        // upwards Click\n        if ($scope.$parent.upwardsClick) {\n          let res = calcRes($scope.options);\n          $scope.$parent.upwardsClick(option, res);\n        }\n\n        $scope.childsMap[option.trackingId].downWardstoggleAll(option.state);\n      };\n\n      $scope.downWardstoggleAll = function (toSetState: OptionState) {\n        $scope.options = toggleDownWards($scope.options, toSetState, $scope);\n      }\n    },\n  };\n}\n\n\nfunction toggleDownWards(options: InternalOption[], toSetState: OptionState, $scope): InternalOption[] {\n  return options.map(\n      option => {\n        option.children = toggleDownWards(option.children, toSetState, $scope);\n        setSelected(option, toSetState, $scope);\n        return option;\n      }\n  )\n}\n\n\nfunction calcRes(options: InternalOption[]): Result {\n  return options.reduce(\n      (prev: Result, next: InternalOption) => {\n        if (next.state === OptionState.selected) {\n          prev.selected++;\n        }\n        if (next.state === OptionState.unselected) {\n          prev.unselected++;\n        }\n        if (next.state === OptionState.childsSelected) {\n          prev.childsSelected++;\n        }\n\n        return prev\n\n      },\n      new Result(options.length))\n}\n\n\nfunction setSelected(option: InternalOption, optionState: OptionState, $scope) {\n  option.state = optionState;\n  $scope.select({option: option});\n}\n","import {OptionState} from '../model/option-state.enum';\n\n\nexport class W11KSelectCheckbox {\n  state: OptionState;\n  toggle: Function;\n\n  getClass(state: OptionState): string {\n    return OptionState[state];\n  }\n\n}\n\nexport function w11kSelectCheckboxDirective(): ng.IDirective {\n  return {\n    scope: {\n      'state': '=',\n    },\n    bindToController: true,\n    controllerAs: '$ctrl',\n    template: `<a class=\"w11k-checkbox\" ng-class=\"$ctrl.getClass($ctrl.state)\"></a>`,\n    restrict: 'E',\n    controller: W11KSelectCheckbox\n  }\n\n}\n","export function w11kSelectInfiniteScroll($timeout) {\n  'ngInject';\n  return {\n    link: function (scope, element, attrs) {\n      let scrollDistance = 0;\n      let scrollEnabled = true;\n      let checkImmediatelyWhenEnabled = false;\n\n      let onDomScrollHandler = function () {\n        onScrollHandler(true);\n      };\n\n      let scrollContainer = element[0];\n\n      if (scrollContainer.children.length !== 1) {\n        throw new Error('scroll container has to have exactly one child!');\n      }\n\n      let content = scrollContainer.children[0];\n\n      let onScrollHandler = function (apply?) {\n\n        let distanceToBottom = content.clientHeight - scrollContainer.scrollTop;\n        let shouldScroll = distanceToBottom <= scrollContainer.clientHeight * (scrollDistance + 1);\n\n        if (shouldScroll && scrollEnabled) {\n          if (apply) {\n            scope.$apply(function () {\n              scope.$eval(attrs.w11kSelectInfiniteScroll);\n            });\n          }\n          else {\n            scope.$eval(attrs.w11kSelectInfiniteScroll);\n          }\n        }\n        else if (shouldScroll) {\n          checkImmediatelyWhenEnabled = true;\n        }\n      };\n\n      attrs.$observe('w11kSelectInfiniteScrollDistance', function (value: any) {\n        scrollDistance = parseFloat(value);\n      });\n\n\n      attrs.$observe('w11kSelectInfiniteScrollDisabled', function (value: any) {\n        scrollEnabled = !value;\n\n        if (scrollEnabled && checkImmediatelyWhenEnabled) {\n          checkImmediatelyWhenEnabled = false;\n          onScrollHandler();\n        }\n      });\n\n      element.on('scroll', onDomScrollHandler);\n      scope.$on('$destroy', function () {\n        element.off('scroll', onDomScrollHandler);\n      });\n\n      return $timeout(function () {\n        if (attrs.w11kSelectInfiniteScrollImmediateCheck) {\n          if (scope.$eval(attrs.w11kSelectInfiniteScrollImmediateCheck)) {\n            onScrollHandler();\n          }\n        }\n      });\n    }\n  };\n}\n","export function keyListener () {\n  return function (scope, elm, attrs) {\n    // prevent scroll on space click\n    elm.bind(\"keydown\", function (event) {\n      if (event.keyCode === 32) {\n        event.preventDefault();\n      }\n    });\n\n    // trigger click on spacer || enter\n    elm.bind(\"keyup\", function (event) {\n      if (event.keyCode === 32 || event.keyCode === 13) {\n        scope.$apply(attrs.keyListener);\n      }\n    });\n\n  };\n}\n","export class ConfigCommon {\n  templateUrl: string = 'w11k-select.tpl.html';\n  templateUrlOptions: string = 'w11k-select-option.tpl.html';\n}\nexport interface StyleConfig {\n  marginBottom: '10px';\n  maxHeight: undefined | string;\n}\n\nexport interface FilterConfig {\n  active: boolean;\n  placeholder: string;\n  select: {\n    active: boolean;\n    text: undefined | string;\n  }\n  deselect: {\n    active: true,\n    text: undefined | string;\n  }\n}\n\nexport class ConfigInstance {\n  /** for form validation */\n  required: boolean = false;\n  /** Hide checkboxes during single selection */\n  hideCheckboxes: boolean = false;\n  /** single or multiple select */\n  multiple: boolean = true;\n  /** disable user interaction */\n  disabled: boolean = false;\n  /** all the configuration for the header (visible if dropdown closed) */\n  header = {\n    /** text to show if no item selected (plain text, no evaluation, no data-binding) */\n    placeholder: '',\n    /**\n     * text to show if item(s) selected (expression, evaluated against user scope)\n     * make sure to enclose your expression withing quotes, otherwise it will be evaluated too early\n     * default: undefined evaluates to a comma separated representation of selected items\n     * example: ng-model='options.selected' w11k-select-config='{header: {placeholder: 'options.selected.length'}}'\n     */\n    text: undefined\n  };\n  dropdown: {\n    onOpen: (() => void) | undefined,\n    onClose: (() => void) | undefined\n  } = {\n    onOpen: undefined,\n    onClose: undefined\n  };\n  /** all the configuration for the filter section within the dropdown */\n  filter: FilterConfig = {\n    /** activate filter input to search for options */\n    active: true,\n    /** text to show if no filter is applied */\n    placeholder: 'Filter',\n    /** 'select all filtered options' button */\n    select: {\n      /** show select all button */\n      active: true,\n      /**\n       * label for select all button\n       * default: undefined evaluates to 'all'\n       */\n      text: undefined\n    },\n    /** 'deselect all filtered options' button */\n    deselect: {\n      /** show deselect all button */\n      active: true,\n      /**\n       * label for deselect all button\n       * default: undefined evaluates to 'none'\n       */\n      text: undefined\n    }\n  };\n\n  /** values for dynamically calculated styling of dropdown */\n  style: StyleConfig = {\n    /** margin-bottom for automatic height adjust */\n    marginBottom: '10px',\n    /** static or manually calculated max height (disables internal height calculation) */\n    maxHeight: undefined\n  };\n  /** when set to true, the clear-button is always visible. */\n  showClearAlways: boolean = false;\n  children: string;\n\n}\n\nexport class Config {\n  common: ConfigCommon;\n  instance: ConfigInstance;\n\n\n  constructor(common?: ConfigCommon, instance?: ConfigInstance) {\n    this.common = common || new ConfigCommon();\n    this.instance = instance || new ConfigInstance();\n  }\n}\n","export enum OptionState {\n  unselected,\n  selected,\n  childsSelected\n}\n","/** @internal */\nimport * as angular from 'angular';\nimport {IDocumentService, IParseService} from 'angular';\n\nexport class W11KSelectHelper {\n\n  //               value                 as    label                for       item              in    collection                    |  filter                        track by     tracking\n  OPTIONS_EXP = /^([a-zA-Z][\\w\\.]*)(?:\\s+as\\s+([a-zA-Z][\\w\\.]*))?\\s+for\\s+(?:([a-zA-Z][\\w]*))\\s+in\\s+([$_a-zA-Z][\\w\\.\\(\\)]*(?:\\s+\\|\\s[a-zA-Z][\\w\\:_\\{\\}']*)*)(?:\\s+track\\sby\\s+([a-zA-Z][\\w\\.]*))?$/;\n\n\n  constructor(public $parse: IParseService,\n              public $document: IDocumentService) {\n    'ngInject';\n\n  }\n\n  extendDeep = (dst, ...otherArgs) => {\n    angular.forEach(otherArgs, (obj) => {\n      if (obj !== dst) {\n        angular.forEach(obj, (value, key) => {\n          if (dst[key] && dst[key].constructor && dst[key].constructor === Object) {\n            this.extendDeep(dst[key], value);\n          } else {\n            dst[key] = value;\n          }\n        });\n      }\n    });\n    return dst;\n  };\n\n  hashCode(value) {\n    let string;\n    if (typeof value === 'object') {\n      string = angular.toJson(value);\n    }\n    else {\n      string = value.toString();\n    }\n\n    let hash = 0;\n    let length = string.length;\n    for (let i = 0; i < length; i++) {\n      hash = string.charCodeAt(i) + (hash << 6) + (hash << 16) - hash;\n    }\n\n    return hash.toString(36);\n  }\n\n  parseOptions(input) {\n\n    let match = input.match(this.OPTIONS_EXP);\n    if (!match) {\n      let expected = '\"item.value\" [as \"item.label\"] for \"item\" in \"collection [ | filter ] [track by item.value.unique]\"';\n      throw new Error('Expected options in form of \\'' + expected + '\\' but got \"' + input + '\".');\n    }\n\n    let result: any = {\n      value: this.$parse(match[1]),\n      label: this.$parse(match[2] || match[1]),\n      item: match[3],\n      collection: this.$parse(match[4])\n    };\n\n    if (match[5] !== undefined) {\n      result.tracking = this.$parse(match[5]);\n    }\n\n    return result;\n  }\n\n  getParent(element, selector) {\n    // with jQuery\n    if (angular.isFunction(element.parents)) {\n      let container = element.parents(selector);\n      if (container.length > 0) {\n        return container[0];\n      }\n\n      return;\n    }\n\n    // without jQuery\n    let matchesSelector = 'MatchesSelector';\n    let matchFunctions = [\n      'matches',\n      'matchesSelector',\n      'moz' + matchesSelector,\n      'webkit' + matchesSelector,\n      'ms' + matchesSelector,\n      'o' + matchesSelector\n    ];\n\n    for (let index in matchFunctions) {\n      let matchFunction = matchFunctions[index];\n      if (angular.isFunction(element[0][matchFunction])) {\n        let parent1 = element[0].parentNode;\n        while (parent1 !== this.$document[0]) {\n          if (parent1[matchFunction](selector)) {\n            return parent1;\n          }\n          parent1 = parent1.parentNode;\n        }\n\n        return;\n      }\n    }\n\n    return;\n  }\n}\n","import {OptionState} from './option-state.enum';\nexport class InternalOption {\n\n  trackingId: string;\n  label: string;\n  model: any;\n  selected: boolean;\n  state: OptionState;\n  children: any[];\n  parent: any;\n\n  constructor(trackingId: string, label: string, model: any, selected: boolean, state: OptionState, children: any[], parent: any) {\n    this.trackingId = trackingId;\n    this.label = label;\n    this.model = model;\n    this.selected = selected;\n    this.state = state;\n    this.children = children;\n    this.parent = parent;\n  }\n}\n","'use strict';\n/** @internal */\nimport * as angular from 'angular';\nimport {IModule} from 'angular';\nimport {Config} from './model/config.model';\nimport {W11KSelectHelper} from './w11k-select-helper.factory';\nimport {w11kSelect} from './w11k-select.directive';\nimport {w11kSelectOptionDirektive} from './w11k-select-option/w11k-select-option.directive';\nimport {w11kSelectCheckboxDirective} from './w11k-select-checkbox/w11k-checkbox.directive';\nimport {w11kSelectInfiniteScroll} from './w11k-select-infinite-scroll.directive';\nimport {keyListener} from './lib/key-listener';\n\nexport const module: IModule = angular.module('w11k.select', [\n  'w11k.dropdownToggle',\n  'w11k.select.template'\n]);\n\nmodule\n    .constant('w11kSelectConfig', new Config())\n    .directive('w11kSelectInfiniteScroll', w11kSelectInfiniteScroll)\n    .service('w11kSelectHelper', W11KSelectHelper)\n    .directive('w11kSelect', w11kSelect)\n    .directive('w11kSelectOption', w11kSelectOptionDirektive)\n    .directive('w11kSelectCheckbox', w11kSelectCheckboxDirective)\n    .directive('keyListener', keyListener);\n"],"names":["options","selected","i","length","state","OptionState","unselected","setSelected","children","option","optionsExpParsed","context","item","value","externalOption2value","model","config","arr","forEach","traverse","push","internalOption2value","w11kSelectHelper","undefined","tracking","assignValueFn","assign","trackingValue","Error","toString","hashCode","label","externalOptions","viewValue","externalOption","parent","trackingId","value2trackingId","externalOption2label","internalOption","InternalOption","viewValueIDs","map","child","prepareOptions","labelArray","collectActiveLabels","w11kSelectConfig","$parse","$document","$filter","$timeout","$window","$q","jqWindow","angular.element","restrict","replace","templateUrl","common","scope","require","controller","$scope","$attrs","w11kSelect","exposeExpression","$parent","this","open","dropdown","close","toggle","compile","tElement","tAttrs","configExpParsed","parseOptions","w11kSelectOptions","ngModelSetter","ngModel","iElement","iAttrs","optionsAlreadyRead","then","checkSelection","updateNgModel","checkConfig","setViewValue","configRead","updateStaticTexts","filter","select","active","text","selectFilteredButton","domElement","querySelector","textContent","deselect","deselectFilteredButton","header","placeholder","headerPlaceholder","multiple","selectedOptions","internalOptions","event","keyCode","angular.isDefined","style","maxHeight","domDropDownContent","calculateDynamicMaxHeight","containerHeight","containerOffset","contentOffset","getBoundingClientRect","top","windowHeight","innerHeight","document","documentElement","clientHeight","domHeightAdjustContainer","marginBottom","indexOf","referenceHeight","referenceOffset","parseFloat","slice","minHeightFor3Elements","domHeaderText","$eval","arr_1","join","hasBeenOpened","optionsFiltered","values","visible","initialLimitTo","selectedValues","internalOptions2externalModel","$setViewValue","updateHeader","angular.forEach","$parsers","parser","ngModelAlreadyRead","$viewValue","internalOptionsMap","modelValue","angular.isArray","angular.isUndefined","required","angular.copy","instance","$watch","newConfig","extendDeep","apply","concat","applyConfig","angular.isObject","domDropDownMenu","getParent","onOpen","$event","disabled","prevent","filterOptions","on","onEscPressed","visibility","adjustHeight","focus","angular.isFunction","onClose","resetHeight","off","$on","onKeyPressedOnDropDownToggle","preventDefault","stopPropagation","increaseLimitTo","showMoreOptions","onFilterValueChanged","clearFilter","onKeyPressedInFilter","selectFiltered","deselectFiltered","deselectAll","updateOptions","deferred","defer","promise","collection","externalOptions2internalOptions","resolve","$watchCollection","newVal","isEmpty","$isEmpty","$render","render","$formatters","external2internal","$validators","validateRequired","internal2external","templateUrlOptions","childsMap","addChild","upwardsClick","clickedOption","res","fatherOption","find","childsSelected","res_1","calcRes","childScope","father","onOptionStateClick","downWardstoggleAll","toSetState","toggleDownWards","reduce","prev","next","Result","optionState","bindToController","controllerAs","template","W11KSelectCheckbox","link","element","attrs","scrollDistance","scrollEnabled","checkImmediatelyWhenEnabled","onDomScrollHandler","onScrollHandler","scrollContainer","content","distanceToBottom","scrollTop","shouldScroll","$apply","w11kSelectInfiniteScroll","$observe","w11kSelectInfiniteScrollImmediateCheck","elm","bind","keyListener","ConfigCommon","ConfigInstance","dst","_i","otherArgs","obj","key","constructor","Object","_this","W11KSelectHelper","string","angular.toJson","hash","charCodeAt","input","match","OPTIONS_EXP","expected","result","selector","parents","container","matchesSelector","matchFunctions","index","matchFunction","parent1","parentNode","module","angular.module","constant","Config","directive","service","w11kSelectOptionDirektive","w11kSelectCheckboxDirective"],"mappings":"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"}